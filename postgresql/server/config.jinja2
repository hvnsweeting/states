{#- Usage of this is governed by a license that can be found in doc/license.rst -#}

# {{ salt['pillar.get']('message_do_not_modify') }}

{% from "postgresql/map.jinja2" import postgresql with context %}
{% set version = postgresql.version %}

{#-
 Memory units:
 kB = kilobytes
 MB = megabytes
 GB = gigabytes

 Time units:
 ms = milliseconds
 s = seconds
 min = minutes
 h = hours
 d = days
#}

{#-
 File system
#}
data_directory = '/var/lib/postgresql/{{ version }}/main'
hba_file = '/etc/postgresql/{{ version }}/main/pg_hba.conf'
ident_file = '/etc/postgresql/{{ version }}/main/pg_ident.conf'
external_pid_file = '/var/run/postgresql/{{ version }}-main.pid'
{{ postgresql["repo_configs"][postgresql.version]["unix_socket_dir_var"] }} = '/var/run/postgresql'

{#-
 Network and Security
#}
password_encryption = on
{#- master server (need to be connected from standby servers)
and hot standby servers (hot_standby means serving read only requests)
should are public server - expose to world#}
{%- set listen_addresses  = salt['pillar.get']('postgresql:listen_addresses', ['127.0.0.1', '::1']) | join(', ') %}
{%- if role is defined %}
    {%- if role == 'master' %}
        {%- set listen_addresses = '*' %}
    {%- elif role == 'standby' %}
{%- set hot_standby = salt['pillar.get']('postgresql:replication:hot_standby', True) %}
        {%- if hot_standby %}
            {%- set listen_addresses = '*' %}
        {%- endif %}
    {%- endif %}
{%- endif %}
listen_addresses = '{{ listen_addresses }}'
port = {{ salt['pillar.get']('postgresql:listen_port', 5432) }}
{#-
 Increasing max_connections costs ~400 bytes of shared memory per
 connection slot, plus lock space (see max_locks_per_transaction).
#}
max_connections = {{ salt['pillar.get']('postgresql:max_connections', 100) }}
{#-superuser_reserved_connections = 3#}
{#- force bonjour to be off #}
bonjour = off
{#-authentication_timeout = 1min#}

{%- set pgsql_ssl = salt['pillar.get']('postgresql:ssl', False) %}
{%- if pgsql_ssl %}
ssl = true
ssl_renegotiation_limit = 512MB
ssl_ciphers = 'EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CAMELLIA128:+AES128:!SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PS'
ssl_cert_file = '/etc/ssl/certs/{{ pgsql_ssl }}_chained.crt'
ssl_key_file = '/etc/ssl/private/{{ pgsql_ssl }}.pem'
{% else %}
ssl = false
{% endif %}

{#- TCP Keepalives: use all system default #}
tcp_keepalives_idle = 0
tcp_keepalives_interval = 0
tcp_keepalives_count = 0

{#- Memory #}
work_mem = {{ salt['pillar.get']('postgresql:work_mem', 1) }}MB

{#-
 Resource Usage except WAL
#}
shared_buffers = {{ salt['pillar.get']('postgresql:shared_buffers', '24MB') }}
temp_buffers = {{ salt['pillar.get']('postgresql:temp_buffers', '8MB') }}

{#-
 Logging
#}

log_destination = 'syslog'
syslog_facility = 'local0'
syslog_ident = 'postgres'

{#- What to Log #}

debug_print_parse = off
debug_print_rewritten = off
debug_print_plan = off
debug_pretty_print = on
log_checkpoints = off
log_connections = off
log_disconnections = off
log_duration = off

{#-
log_min_duration_statement =
 -1 is disabled
 0 logs all statements
 > 0 logs only statements running at least this number of milliseconds
#}
log_min_duration_statement = {{ salt['pillar.get']('postgresql:log_slow_query', -1) }}

{%- if salt['pillar.get']('debug', False) %}
log_error_verbosity = verbose
log_min_messages = debug5
log_min_error_statement = debug5
{%- else %}
log_error_verbosity = default
log_min_messages = warning
log_min_error_statement = error
{%- endif %}

log_hostname = off
{#- special values:
 %a = application name
 %u = user name
 %d = database name
 %r = remote host and port
 %h = remote host
 %p = process ID
 %t = timestamp without milliseconds
 %m = timestamp with milliseconds
 %i = command tag
 %e = SQL state
 %c = session ID
 %l = session line number
 %s = session start timestamp
 %v = virtual transaction ID
 %x = transaction ID (0 if none)
 %q = stop here in non-session processes
 %% = '%'
#}
log_line_prefix = ''

{#- log lock waits >= deadlock_timeout #}
#log_lock_waits = off
{#- none, ddl, mod, all #}
#log_statement = 'none'
{%- set timezone = salt['pillar.get']('timezone', 'UTC') %}
log_timezone = '{{ timezone }}'
log_checkpoints = on

{#-
 Locale and Formatting
#}
timezone = '{{ timezone }}'
{#- These settings are initialized by initdb, but they can be changed.#}
{#-lc_messages = 'C'
lc_monetary = 'C'
lc_numeric = 'C'
lc_time = 'C'#}

{%- if role is defined %}
max_wal_senders = 10 {#- max number of walsender processes #}
wal_keep_segments = 4 {#- in logfile segments, 16MB each; 0 disables #}
    {%- if salt['pillar.get']('postgresql:replication:hot_standby', True) %}
wal_level = hot_standby  {#- minimal, archive, or hot_standby #}
hot_standby = on {#- "on" allows queries during recovery #}
    {%- else %}
wal_level = archive
hot_standby = off
    {%- endif %}
{%- endif %}

{#-
# - Checkpoints -

#checkpoint_segments = 3  # in logfile segments, min 1, 16MB each
#chec}kpoint_timeout = 5min  # range 30s-1h
#checkpoint_completion_target = 0.5 # checkpoint target duration, 0.0 - 1.0
#checkpoint_warning = 30s  # 0 disables

# - Archiving -

archive_mode = on #  # allows archiving to be done
    # (change requires restart)
archive_command = 'test ! -f /pgbackup/%f && cp %p /pgbackup/%f'
  # command to use to archive a logfile segment
    # placeholders: %p = path of file to archive
    #               %f = file name only
    # e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#archive_timeout = 0  # force a logfile segment switch after this
    # number of seconds; 0 disables


#------------------------------------------------------------------------------
# REPLICATION
#------------------------------------------------------------------------------

# - Sending Server(s) -

# Set these on the master and on any standby that will send replication data.

max_wal_senders = 10  # max number of walsender processes
    # (change requires restart)
wal_keep_segments = 4  # in logfile segments, 16MB each; 0 disables
#replication_timeout = 60s # in milliseconds; 0 disables

# - Master Server -

# These settings are ignored on a standby server.

#synchronous_standby_names = '' # standby servers that provide sync rep
    # comma-separated list of application_name
    # from standby(s); '*' = all
#vacuum_defer_cleanup_age = 0 # number of xacts by which cleanup is delayed

# - Standby Servers -

# These settings are ignored on a master server.

#hot_standby = off   # "on" allows queries during recovery
     # (change requires restart)
#max_standby_archive_delay = 30s # max delay before canceling queries
     # when reading WAL from archive;
     # -1 allows indefinite delay
#max_standby_streaming_delay = 30s # max delay before canceling queries
     # when reading streaming WAL;
     # -1 allows indefinite delay
#wal_receiver_status_interval = 10s # send replies at least this often
     # 0 disables
#hot_standby_feedback = off  # send info from standby to prevent
     # query conflicts
#}
