{#- Usage of this is governed by a license that can be found in doc/license.rst -#}

# {{ salt['pillar.get']('message_do_not_modify') }}

$LocalHostName {{ grains['id'] }}

$ModLoad imuxsock # provides support for local system logging
{%- if grains['virtual'] != 'openvzve' %}
$ModLoad imklog
{%- endif %}
{#- #$ModLoad immark  # provides --MARK-- message capability #}

{%- block remote_listening %}
$ModLoad imudp
$UDPServerAddress 127.0.0.1
$UDPServerRun 514
{%- endblock %}

$ModLoad imfile

{#-
 provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514


GLOBAL DIRECTIVES ####


 Use traditional timestamp format.
 To enable high precision timestamps, comment out the following line.

#}
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

{#- # Filter duplicated messages #}
$RepeatedMsgReduction on

{#-
# Set the default permissions for all log files.
#
#}
$FileOwner syslog
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
$PrivDropToUser syslog
$PrivDropToGroup syslog

$WorkDirectory /var/spool/rsyslog
$IncludeConfig /etc/rsyslog.d/*.conf

{#- send authentication logs to auth.log #}
auth,authpriv.* /var/log/auth.log

{#-
20 ufw
 Log kernel generated UFW log messages to file
:msg,contains,"[UFW " /var/log/ufw.log

 Uncomment the following to stop logging anything that matches the last rule.
 Doing this will stop logging kernel generated UFW log messages to the file
 normally containing kern.* messages (eg, /var/log/kern.log)
& ~
#}

{#-
50 default
  Default rules for rsyslog.

   For more information see rsyslog.conf(5) and /etc/rsyslog.conf


 First some standard log files.  Log by facility.

#}
{%- if not salt['pillar.get']('debug', False) %}
    {%- for f in 'sshd', 'cron', 'sudo' %}
        {%- for act in 'opened', 'closed' %}
:msg, contains, "pam_unix({{ f }}:session): session {{ act }} for user" stop
        {%- endfor %}
    {%- endfor %}
{#- discard uwsgi ping log msg produced by NRPE check #}
:msg, isequal, " PING" stop
{#- discard ssh monitoring check msg #}
:msg, contains, "Did not receive identification string from 127.0.0.1" stop
{#- discard influxdb monitoring check msg #}
:msg, contains, "tcp.Mux: cannot read header byte: EOF" stop
{#- discard graylog2 health check msg #}
if ($programname == "uwsgi-graylog2" or $programname == "nginx" and $msg contains "GET /health/currentthroughput") then stop
{# discard nginx response buffer msg #}
if ($programname == "nginx" and $msg contains "an upstream response is buffered to a temporary file") then stop
{#- discard notice/info/debug sshd msg #}
if ($programname == 'sshd' and $syslogseverity > '4') then stop
{%- endif %}

{#-
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log

cron.* /var/log/cron.log
daemon.* -/var/log/daemon.log
lpr.* -/var/log/lpr.log
user.* -/var/log/user.log

 Logging for the mail system.  Split it up so that
 it is easy to write scripts to parse these files.
mail.info -/var/log/mail.info
mail.warn -/var/log/mail.warn
mail.err /var/log/mail.err

# Logging for INN news system.
news.crit /var/log/news/news.crit
news.err /var/log/news/news.err
news.notice -/var/log/news/news.notice


 Some "catch-all" log files.

*.=debug;\
    auth,authpriv.none;\
    news.none;mail.none -/var/log/debug
*.=info;*.=notice;*.=warn;\
    auth,authpriv.none;\
    cron,daemon.none;\
    mail,news.none -/var/log/messages


 Emergencies are sent to everybody logged in.

*.emerg                                :omusrmsg:*


 I like to have messages displayed on the console, but only on a virtual
 console I usually leave idle.

daemon,mail.*;\
    news.=crit;news.=err;news.=notice;\
    *.=debug;*.=info;\
    *.=notice;*.=warn /dev/tty8

 The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
 you must invoke `xconsole' with the `-file' option:

    $ xconsole -file /dev/xconsole [...]

 NOTE: adjust the list below, or you'll go crazy if you have a reasonably
      busy site..

daemon.*;mail.*;\
    news.err;\
    *.=debug;*.=info;\
    *.=notice;*.=warn |/dev/xconsole
#}

*.*           -/var/log/syslog
{%- block remote_logging %}
{%- set graylog2_address = salt['pillar.get']('graylog2_address', False) %}
    {%- if graylog2_address %}
*.*;local7.none {% if salt['pillar.get']('rsyslog:tcp', False) %}@{% endif %}@{{ graylog2_address }}:1514
    {%- endif -%}
{%- endblock -%}
