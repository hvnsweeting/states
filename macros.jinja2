{#- Usage of this is governed by a license that can be found in doc/license.rst

file contains all common macros
-#}

{#- when upgrading salt, it should only change salt version here and in
    bootstrap.sh (not managed by salt),
    all consumer of these macros should got it automatically,
    Changing directly in consumer only needed when new version of salt
    change a lot in ppa structure.
-#}
{%- macro salt_version() -%}
    2016.3.0+ds-1
{%- endmacro -%}

{%- macro salt_deb_version() -%}
    {#-
        example: salt-minion_0.17.5-1precise1_all.deb
        this macro will provide ``0.17.5-1precise1``
    -#}
        {{ salt_version() }}{{ grains['oscodename'] }}1
{%- endmacro -%}

{#-
 Make sure a dictionary (pillars) default value is set even if it's ``None`` in
 pillars.
#}
{%- macro dict_default(d, key, default) -%}
    {%- if key not in d or d.get(key, default) == None -%}
        {%- do d.update({key: default}) -%}
    {%- endif -%}
{%- endmacro -%}

{#- manage pid file owner/mode only if it exists, as if always manage it may
cause problem because each daemon handles existed pid file different way.

Args:
path: path to PID file
user: user that PID file should belong
group: group that PID file should belong
watch_in_service: service which watches the PID file
mode: permission of PID file
-#}
{%- macro manage_pid(path, user, group, watch_in_service, mode=644) -%}
    {%- if salt['file.file_exists'](path) %}
{{ path }}:
  file:
    - managed
    - user: {{ user }}
    - group: {{ group }}
    - mode: {{ mode }}
    - replace: False
        {%- if caller is defined -%}
            {%- for line in caller().split("\n") -%}
                {%- if loop.first %}
    - require:
                {%- endif %}
{{ line|trim|indent(6, indentfirst=True) }}
            {%- endfor -%}
        {%- endif %}
    - watch_in:
      - service: {{ watch_in_service }}
    {%- else %}
# {{ path }} does not exist, no need to manage
    {%- endif -%}
{%- endmacro -%}

{#- extend for change owner of ssh keys -#}
{%- macro change_ssh_key_owner(owner, requisites) -%}
    {#- a dirty hack to make sure this macro will render at least one state to
        extend #}
  /etc/ssh/keys:
    file:
      - directory

  {%- set users = salt['pillar.get']('ssh:users', {}) %}
  {%- if owner in users %}
  /etc/ssh/keys/{{ owner }}:
    file:
      - user: {{ owner }}
      - file_mode: 400
      - recurse:
        - user
        - mode
      - require:
        {%- for k, v in requisites.iteritems() %}
        - {{ k }}: {{ v }}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro -%}
