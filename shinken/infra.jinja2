{#- Usage of this is governed by a license that can be found in doc/license.rst -#}

# {{ salt['pillar.get']('message_do_not_modify') }}

{%- from 'macros.jinja2' import dict_default with context %}

{%- set mine = salt['mine.get']('*', 'monitoring.data') %}
{%- set hostname = salt['pillar.get']('shinken:hostnames')[0] %}
{%- set ssl = salt['pillar.get']('shinken:ssl', False) %}
{%- set scheme = 'https' if ssl else 'http' %}
{%- set channel = salt["pillar.get"]("shinken:slack:channel", None) %}
{%- set token = salt["pillar.get"]("shinken:slack:token", None) %}
{%- set webhook_url = salt['pillar.get']('shinken:mattermost:webhook_url', None) %}
{%- set shinken_url = scheme ~ '://' ~ hostname %}
{%- set integrations = {
    'mattermost': {
        'pillar': salt["pillar.get"]("shinken:mattermost", False),
        'notify-host': '/usr/local/shinken/bin/mattermost_notify --config=/etc/shinken/mattermost_hookurl.yml --mode=host --host-address="$HOSTADDRESS$" --host-alias="$HOSTALIAS$" --host-name="$HOSTNAME$" --long-date-time="$LONGDATETIME$" --host-output="$HOSTOUTPUT$" --host-state="$HOSTSTATE$" --shinken-url="' ~ shinken_url ~ '"',
        'notify-service': '/usr/local/shinken/bin/mattermost_notify --config=/etc/shinken/mattermost_hookurl.yml --host-address="$HOSTADDRESS$" --host-alias="$HOSTALIAS$" --host-name="$HOSTNAME$" --long-date-time="$LONGDATETIME$" --service-desc="$SERVICEDESC$" --service-output="$SERVICEOUTPUT$" --service-state="$SERVICESTATE$" --shinken-url="' ~ shinken_url ~ '" --total-service-ok="$TOTALSERVICESOK$" --total-service-warning="$TOTALSERVICESWARNING$" --total-service-critical="$TOTALSERVICESCRITICAL$" --total-service-unknown="$TOTALSERVICESUNKNOWN$" --total-service-problem="$TOTALSERVICEPROBLEMS$"'
    },
    'slack': {
        'pillar': salt["pillar.get"]("shinken:slack", False),
        'notify-host': '/usr/bin/printf "%b" "Shinken Notification\\n\\nType:$NOTIFICATIONTYPE$\\nHost: $HOSTALIAS$\\nState: $HOSTSTATE$\\nAddress: $HOSTADDRESS$\\nInfo: $HOSTOUTPUT$\\nWhen: $LONGDATETIME$\\n\\nURL: ' ~ scheme ~ '://' ~ hostname ~ '/host/$HOSTNAME$ " | /usr/local/shinken/bin/slacker -c ' ~ channel ~ ' -t ' ~ token,
        'notify-service': '/usr/bin/printf "%b" "Shinken Notification\\n\\nNotification Type: $NOTIFICATIONTYPE$\\n\\nService: $SERVICEDESC$\\nHost: $HOSTALIAS$\\nAddress: $HOSTADDRESS$\\nState: $SERVICESTATE$\\nWhen: $LONGDATETIME$\\n\\nAdditional Info : $SERVICEOUTPUT$\\n\\nServices OK: $TOTALSERVICESOK$\\nServices Warning/Unhandled: $TOTALSERVICESWARNING$/$TOTALSERVICESWARNINGUNHANDLED$\\nServices Critical/Unhandled: $TOTALSERVICESCRITICAL$/$TOTALSERVICESCRITICALUNHANDLED$\\nServices Unknown/Unhandled: $TOTALSERVICESUNKNOWN$/$TOTALSERVICESUNKNOWNUNHANDLED$\\nTotal Services Problems/Unhandlded: $TOTALSERVICEPROBLEMS$/$TOTALSERVICEPROBLEMSUNHANDLED$\\n\\nURL: ' ~ scheme ~ '://' ~ hostname ~ '/service/$HOSTNAME$/$SERVICEDESC$ "| /usr/local/shinken/bin/slacker -c ' ~ channel ~ ' -t ' ~ token,
    },
} %}

define host {
    name salt-host
{%- if integrations['mattermost']['pillar'] %}
    contacts mattermost
{%- endif %}
    contact_groups admins
    notification_interval 0
    first_notification_delay 0
    notification_options d,r
    notification_period 24x7
    notifications_enabled 1
    active_checks_enabled 1
    check_period 24x7
    check_interval 2
    retry_interval 1
    max_check_attempts 2
    check_command check_ping
    event_handler_enabled 0
    flap_detection_enabled 1
    process_perf_data 1
    retain_status_information 1
    retain_nonstatus_information 1
    business_impact 5
    register 0
    poller_tag all
}

{#- dummy host for command: bp_rule
    https://shinken.readthedocs.org/en/latest/06_medium/business-rules.html #}
define host {
    use salt-host
    host_name dummy
    check_command check_dummy
    business_impact 0
    address 127.0.0.1
}

{%- set users = salt['pillar.get']('shinken:users') -%}
{%- set ro_users = [] -%}
{%- for ro_user in users if salt['pillar.get']('shinken:users:' + ro_user + ':read_only', False) -%}
    {%- do ro_users.append(ro_user) -%}
{%- endfor %}

{%- for host in mine -%}
    {%- if mine[host]['monitor'] %}
define host {
    use salt-host
    host_name {{ host }}
    address {{ mine[host]['ip_addrs'][ip_source] }}
    alias {{ host }}
    hostgroups {{ mine[host]['roles']|join(',') }}
        {%- if 'parents' in mine[host] and mine[host]['parents'] %}
    parents {{ mine[host]['parents']|join(',') }}
        {%- endif %}
        {%- set contacts = [] -%}
        {%- for ro_user in ro_users -%}
            {#- workaround for `LintCheckSubkeyInSaltPillar()` -#}
            {%- set managed_hosts = salt['pillar.get']('shinken:users:' ~ ro_user ~ ':managed_hosts', []) -%}
            {%- if host in managed_hosts -%}
                {%- do contacts.append(ro_user) -%}
            {%- endif -%}
        {%- endfor -%}
        {%- if integrations["slack"]["pillar"] -%}
            {%- set slack_managed_hosts = salt["pillar.get"]("shinken:slack:managed_hosts", []) -%}
            {%- if not slack_managed_hosts -%}
                {%- do contacts.append("slack") -%}
            {%- else -%}
                {%- if host in slack_managed_hosts -%}
                    {%- do contacts.append("slack") -%}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
        {%- if contacts %}
    contacts +{{ contacts|join(',') }}
        {%- endif %}
}
    {%- endif -%}
{%- endfor %}

define contact {
    name salt-contact
    can_submit_commands 1
    is_admin 1
    host_notification_period 24x7
    host_notification_options d,u,r,f,s
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1
    service_notification_period 24x7
    service_notification_options c,w,r,u
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
    register 0
}

{%- if ro_users %}
define contact {
    name read-only-contact
    use salt-contact
    can_submit_commands 0
    is_admin 0
}
{%- endif %}

{#-
 This file contains the checks for the low-level infrastructure components
 supported by salt.
#}

{%- for user in users %}
define contact {
    contact_name {{ user }}
    email {{ salt['pillar.get']('shinken:users:' + user + ':email') }}
    password {{ salt['pillar.get']('shinken:users:' + user + ':password') }}
    {%- if salt['pillar.get']('shinken:users:' + user + ':read_only', False) %}
    use read-only-contact
    {%- else %}
    use salt-contact
    {%- endif %}
}
{%- endfor %}

define contactgroup {
    contactgroup_name admins
    alias admins
    members {% for user in users if not salt['pillar.get']('shinken:users:' + user + ':read_only', False) %}{{ user }}{% if not loop.last %},{% endif %}{% endfor %}
    # host notifications can be sent anytime
    host_notification_period 24x7
    # send notifications for all host states, flapping events (f), and scheduled
    # downtime events (s)
    host_notification_options d,u,r,f,s
    # send host notifications via email
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1

    # service notifications can be sent anytime
    service_notification_period 24x7
    service_notification_options c,w,r,u
    # send service notifications via email
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
}

define command {
    command_name notify-host-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nType:$NOTIFICATIONTYPE$\nHost: $HOSTALIAS$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\nWhen: $LONGDATETIME$\n\nURL: {{ scheme }}://{{ hostname }}/host/$HOSTNAME$ " | /usr/bin/bsd-mailx -s "Host $HOSTSTATE$ alert for $HOSTNAME$!" $CONTACTEMAIL$
}

# send email for a service
define command {
    command_name notify-service-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\nWhen: $LONGDATETIME$\n\nAdditional Info : $SERVICEOUTPUT$\n\nServices OK: $TOTALSERVICESOK$\nServices Warning/Unhandled: $TOTALSERVICESWARNING$/$TOTALSERVICESWARNINGUNHANDLED$\nServices Critical/Unhandled: $TOTALSERVICESCRITICAL$/$TOTALSERVICESCRITICALUNHANDLED$\nServices Unknown/Unhandled: $TOTALSERVICESUNKNOWN$/$TOTALSERVICESUNKNOWNUNHANDLED$\nTotal Services Problems/Unhandlded: $TOTALSERVICEPROBLEMS$/$TOTALSERVICEPROBLEMSUNHANDLED$\n\nURL: {{ scheme }}://{{ hostname }}/service/$HOSTNAME$/$SERVICEDESC$ "| /usr/bin/bsd-mailx -s "** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ ** " $CONTACTEMAIL$
}

{%- for i in integrations if integrations[i]['pillar'] %}

define contact {
    contact_name {{ i }}
    can_submit_commands 0
    is_admin 0
    host_notification_period 24x7
    host_notification_options d,u,r,f,s
    host_notification_commands notify-host-by-{{ i }}
    host_notifications_enabled 1
    service_notification_period 24x7
    service_notification_options c,w,r,u
    service_notification_commands notify-service-by-{{ i }}
    service_notifications_enabled 1
    register 1
}

define command {
    command_name notify-host-by-{{ i }}
    command_line {{ integrations[i]['notify-host'] }}
}

define command {
    command_name notify-service-by-{{ i }}
    command_line {{ integrations[i]['notify-service'] }}
}
{%- endfor %}

define command {
    command_name check_nrpe
    command_line /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -t $ARG2$ -u -c $ARG1$
    module_type nrpe_poller
}

define command {
   command_name check_ping
   command_line /usr/lib/nagios/plugins/check_ping -H $HOSTADDRESS$ -w 3000,100% -c 5000,100% -p 1
}

define command {
    command_name check_tcp
    command_line /usr/lib/nagios/plugins/check_tcp -H $HOSTADDRESS$ -p $ARG1$ -t $ARG2$
}

{#-
 check http and https make sure that an http(s) request return expected HTTP code
 #}
define command {
    command_name check_http
    command_line /usr/lib/nagios/plugins/check_http -H $ARG1$ -u $ARG2$ -e $ARG3$
}

define command {
    command_name check_https
    command_line /usr/lib/nagios/plugins/check_http -H $ARG1$ --ssl -u $ARG2$ -e $ARG3$
}

define command {
    command_name check_dummy
    command_line /usr/lib/nagios/plugins/check_dummy 0
}

{#- no timeout argument for this command as it's not really used for now. #}
define command {
    command_name check_ssl_configuration
    command_line /usr/lib/nagios/plugins/check_ssl_configuration.py -H $ARG1$
}

{#- fire a salt event when a service goes into hard problem state #}
define command {
  command_name fire_salt_event
  command_line /usr/bin/sudo SHELL=/bin/bash /usr/local/shinken/bin/salt_event_handler --service-state '$SERVICESTATE$' --service-state-type '$SERVICESTATETYPE$' --service-desc '$SERVICEDESC$' --service-display-name '$SERVICEDISPLAYNAME$' --hostname '$HOSTNAME$' --formula '$_SERVICEFORMULA$' --reaction '$_SERVICEREACTION$' --salt-env '$_SERVICESALT_ENV$'
}

define timeperiod {
    timeperiod_name weekdays
    alias 24_Hours_A_Day,_5_Days_A_Week
{%- for day in ('tues', 'wednes', 'thurs', 'fri', 'satur') %}
    {{ day }}day 00:00-24:00
{%- endfor %}
}

define timeperiod {
    timeperiod_name 24x7
    alias 24_Hours_A_Day,_7_Days_A_Week
{%- for day in ('sun', 'mon', 'tues', 'wednes', 'thurs', 'fri', 'satur') %}
    {{ day }}day 00:00-24:00
{%- endfor %}
}

define service {
    name salt-service
    register 0

    active_checks_enabled 0
    passive_checks_enabled 1
    check_freshness 1
    {#-
    NSCA default interval = 5 minutes
    additional_freshness_latency = 15 seconds
    11 minutes is enough for 3 consecutive checks
    even if shinken-receiver is restarted in that time
    #}
    freshness_threshold 660 {#- 11 minutes #}

    # Active service checks should be parallelized (disabling this can lead
    # to major performance problems)
    parallelize_check 1
    # We should obsess over this service (if necessary)
    obsess_over_service 1
    # Service notifications are enabled
    notifications_enabled 1

    {#-
      Service event handler is disabled by default.
      It's only turned on if there is a reaction linked to a check.
      #}
    event_handler_enabled 0
    event_handler fire_salt_event

    flap_detection_enabled 1
    # Failure prediction is enabled
    failure_prediction_enabled 1
    # Process performance data
    process_perf_data 1
    # Retain status information across program restarts
    retain_status_information 1
    # Retain non-status information across program restarts
    retain_nonstatus_information 1
    # The service is not volatile
    is_volatile 0
    # The service can be checked at any time of the day
    check_period 24x7
    # Re-check the service up to 3 times in order to determine its final (hard)
    # state
    max_check_attempts 2
    check_interval 5
    # Re-check the service every three minutes until a hard state can be
    # determined
    retry_interval 3
    # Send notifications about warning, unknown, critical, and recovery events
    notification_options w,u,c,r
    # Re-notify about service problems every hour
    notification_interval 0
    notification_period 24x7
    _httpstink NO
}

{%- for role in salt['common.global_roles']() %}
define hostgroup {
    hostgroup_name {{ role }}
    alias {{ role|capitalize }} Role
{#-
    members hosts
    hostgroup_members hostgroups
    notes note_string
    notes_url url
    action_url url
    realm realm
#}
}

define servicegroup {
    servicegroup_name {{ role }}
    alias {{ role|capitalize }} Role
}
{%- endfor -%}

{%- set reserved_keys = ('check', 'description', 'passive', 'dependencies', 'service_dependencies', 'timeout', 'formula', 'reaction', 'salt_env') -%}
{%- set data = salt['monitoring.shinken'](mine) -%}
{%- set data_keys = data.keys() -%}
{%- do data_keys.sort() -%}
{%- for check_name in data_keys -%}
    {%- for check in data[check_name] -%}
        {%- set check_command = check.data.get('check', 'check_nrpe!' + check_name) -%}
        {%- set check_timeout = check.data.get('timeout', 10) %}
define service {
    use salt-service
    service_description {{ check.shinken_service_description() }}
        {#-
          https://shinken.readthedocs.org/en/latest/06_medium/business-rules.html
          bp_rule is an internal shinken command that can't be changed.
          it's special and is always linked to dummy host.
          -#}
        {%- if check_command.startswith('bp_rule!') %}
    host_name dummy
    check_command {{ check_command }}
        {%- else %}
            {#- not a bp_rule, so set real hostname. #}
    host_name {% for minion in check.minions -%}
                {{ minion }}
                {%- if not loop.last %},{% endif -%}
              {%- endfor %}
    check_command {{ check_command }}!{{ check_timeout }}
        {%- endif %}
    display_name {{ check.data['description'] }}

    {#-
      If reaction key is defined that mean the minion do have access to a
      $formula.reactions.$reaction
      and it worth turn on event handler.
      -#}
    {%- if check.data.get('reaction', False) %}
    event_handler_enabled 1
    _FORMULA {{ check.data['formula'] }}
    _REACTION {{ check.data['reaction'] }}
    _SALT_ENV {{ check.data['salt_env'] }}
    {%- endif -%}

        {%- if not check.data.get('passive', True) -%}
            {#- by default check are passive #}
    active_checks_enabled 1
    passive_checks_enabled 0
    check_freshness 0
        {%- endif %}
    {{ dict_default(check.data, 'dependencies', []) }}
    {% for dependency in check.data['dependencies'] -%}
        {%- if loop.first %}service_dependencies {% endif -%}
        ,{{ dependency.shinken_service_description() }}
        {%- if not loop.last %},{% endif -%}
    {%- endfor -%}
    {#- everything else -#}
        {%- for key_name in check.data -%}
            {%- if key_name not in reserved_keys %}
    {{ key_name }} {{ check.data[key_name] }}
            {%- endif -%}
        {%- endfor %}
}
    {%- endfor -%}
{%- endfor -%}
