#!/bin/bash
# {{ salt['pillar.get']('message_do_not_modify') }}
# Use of this is governed by a license that can be found in doc/license.rst.

# -e is optional argument, if it is passed as the first argument,
# tar command will ignore warning message when it compress a file which
# is changing. Other arguments can be passed normally after it.
# First argument is name of software component
# Second is the working directory where tar will run
# All other arguments are files tar will archive

set -e

# limit resources usage
renice -n 19 -p $$ > /dev/null
ionice -c idle -p $$
XZ_DEFAULTS=--memlimit={{ salt['pillar.get']('backup:xz_memlimit', 64) }}MiB

if [ $1 = '-e' ]; then
    shift
    logfile=$(tempfile)
fi

software=$1
shift
working_directory=$1
shift

SUFFIX="$(/usr/local/bin/backup-gen-suffix.py)"
OUTPUT="/tmp/$software-$SUFFIX.tar.xz"

if [ -z "$logfile" ]; then
    tar --xz -cf $OUTPUT -C $working_directory $*
else
    set +e
    tar --xz -cf $OUTPUT -C $working_directory $* 2>$logfile
    set -e
    # workaround tar warning when compress a file which changed in compress process
    errlog=$(cat ${logfile})
    rm $logfile

    set +e
    if [ -z "$errlog" ]; then
        true
    else
        echo "$errlog" | grep -qv "file changed as we read it"

        if [ $? -eq 0 ]; then
            # found another error log than "file changed as we read it" error
            echo "$errlog"
            exit 1
        else
            # no error log or only "file changed as we read it" error
            # go ahead backup it
            true
        fi
    fi
fi

/usr/local/bin/backup-store $OUTPUT
