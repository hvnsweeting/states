import os.path, sys, os

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

APPEND_SLASH = False
ALLOWED_HOSTS = [{% for hostname in salt['pillar.get']('taiga:hostnames') %}"{{ hostname }}"{% if not loop.last %} , {% endif %}{% endfor %}]

DEBUG = False
TEMPLATE_DEBUG = False
PUBLIC_REGISTER_ENABLED = False

DATABASES = {
    "default": {
        "ENGINE": "transaction_hooks.backends.postgresql_psycopg2",
        'NAME': 'taiga',
        'USER': 'taiga',
        'PASSWORD': '{{ salt['password.pillar']('taiga:db:password', 10) }}',
        'HOST': '{{ salt['pillar.get']('taiga:db:host', '127.0.0.1') }}',
        'PORT': '5432',
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'unix:/var/run/memcache/memcache.sock',
    }
}

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]

# Default configuration for reverse proxy
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTOCOL", "https")

# Errors report configuration
SEND_BROKEN_LINK_EMAILS = True

ATOMIC_REQUESTS = True
TIME_ZONE = "UTC"
LOGIN_URL="/auth/login/"
USE_TZ = True

USE_I18N = True
USE_L10N = True
# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

LANGUAGES = [
    ("en", "English (US)"),
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, "locale"),
    os.path.join(BASE_DIR, "taiga", "locale"),
)

_SCHEME = "{% if salt['pillar.get']('taiga:ssl', False) %}https{% else %}http{% endif %}".strip()
_DOMAIN = "{{ salt['pillar.get']('taiga:hostnames')[0] }}".strip()
_URL = "://".join([_SCHEME, _DOMAIN])
MEDIA_URL = _URL + '/media/'
STATIC_URL = _URL + '/static/'
ADMIN_MEDIA_PREFIX = STATIC_URL + "admin/"

SITES = {
    "api": {"domain": _DOMAIN, "scheme": _SCHEME, "name": "api"},
    "front": {"domain": _DOMAIN, "scheme": _SCHEME, "name": "front"},
}

SITE_ID = "api"

# Session configuration (only used for admin)
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_AGE = 1209600 # (2 weeks)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'message_only': {
            'format': '[taiga] %(message)s'
        },
        'syslog': {
            'format': '%(asctime)-15s taiga[%(process)d] %(levelname)s %(name)s %(module)s.%(funcName)s:%(lineno)d %(message)s',
            'datefmt': '%b %d %H:%M:%S'
        }
    },
    'handlers': {
{%- set graylog2_address = salt['pillar.get']('graylog2_address', False) %}
{%- if graylog2_address %}
        'gelf': {
            'level': 'NOTSET',
            'class': 'graypy.handler.GELFHandler',
            'host': '{{ graylog2_address }}',
            'formatter': 'message_only'
        },
{%- endif %}
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.handlers.SentryHandler'
        },
        'syslog': {
            'level': 'NOTSET',
            'formatter': 'syslog',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'facility': '{% if graylog2_address %}local7{% else %}daemon{% endif %}'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'propagate': True,
            'level':'DEBUG'
        },
        'raven': {
            'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'level': 'WARN',
            'propagate': False
        },
        'sentry.errors': {
            'handlers': ['syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'level': 'DEBUG',
            'propagate': False
        },
     },
    'root': {
        'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
        'propagate': True,
        'level': 'NOTSET'
    },
}


{% set smtp = salt['pillar.get']('taiga:smtp', False)|default(salt['pillar.get']('smtp'), boolean=True) %}
EMAIL_HOST = '{{ smtp['server'] }}'
EMAIL_HOST_PASSWORD = '{{ smtp['password']|default('') }}'
EMAIL_HOST_USER = '{{ smtp['user']|default('') }}'
EMAIL_PORT = {{ smtp['port'] }}
DEFAULT_FROM_EMAIL = '{{ smtp['from'] }}'
SERVER_EMAIL = DEFAULT_FROM_EMAIL
{%- set encryption = smtp['encryption']|default('plain') -%}
{%- if encryption in ('ssl', 'starttls') %}
EMAIL_USE_TLS = True
    {%- if encryption == 'ssl' %}
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
    {%- endif -%}
{%- else %}
EMAIL_USE_TLS = False
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
{%- endif %}

DJMAIL_REAL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DJMAIL_SEND_ASYNC = True
DJMAIL_MAX_RETRY_NUMBER = 3
DJMAIL_TEMPLATE_EXTENSION = "jinja"

# Events backend
EVENTS_PUSH_BACKEND = "taiga.events.backends.postgresql.EventsPushBackend"
# EVENTS_PUSH_BACKEND = "taiga.events.backends.rabbitmq.EventsPushBackend"
# EVENTS_PUSH_BACKEND_OPTIONS = {"url": "//guest:guest@127.0.0.1/"}

# Message System
MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

MEDIA_ROOT = '/var/lib/deployments/taiga/media'
STATIC_ROOT = '/var/lib/deployments/taiga/static'

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Don't forget to use absolute paths, not relative paths.
)

# Defautl storage
DEFAULT_FILE_STORAGE = "taiga.base.storage.FileSystemStorage"

SECRET_KEY = '{{ salt['password.pillar']('taiga:django_key', 56) }}'

RAVEN_CONFIG = {
    'dsn': 'requests+{{ salt['pillar.get']('taiga:sentry', False)|default(salt['pillar.get']('sentry_dsn', False), boolean=True) }}',
}


TEMPLATES = [
    {
        "BACKEND": "django_jinja.backend.Jinja2",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
            "match_extension": ".jinja",
        }
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            'context_processors': [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.request",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ],
        }
    },
]


MIDDLEWARE_CLASSES = [
    "taiga.base.middleware.cors.CoorsMiddleware",
    "taiga.events.middleware.SessionIDMiddleware",

    # Common middlewares
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",

    # Only needed by django admin
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
]

ROOT_URLCONF = "taiga.urls"

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.admin",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",

    "taiga.base",
    "taiga.base.api",
    "taiga.locale",
    "taiga.events",
    "taiga.front",
    "taiga.users",
    "taiga.userstorage",
    "taiga.external_apps",
    "taiga.projects",
    "taiga.projects.references",
    "taiga.projects.custom_attributes",
    "taiga.projects.history",
    "taiga.projects.notifications",
    "taiga.projects.attachments",
    "taiga.projects.likes",
    "taiga.projects.votes",
    "taiga.projects.milestones",
    "taiga.projects.userstories",
    "taiga.projects.tasks",
    "taiga.projects.issues",
    "taiga.projects.wiki",
    "taiga.searches",
    "taiga.timeline",
    "taiga.mdrender",
    "taiga.export_import",
    "taiga.stats",
    "taiga.hooks.github",
    "taiga.hooks.gitlab",
    "taiga.hooks.bitbucket",
    "taiga.webhooks",

    "djmail",
    "django_jinja",
    "django_jinja.contrib._humanize",
    "sr",
    "easy_thumbnails",
    "raven.contrib.django.raven_compat",
    "django_transactional_cleanup",
]
{%- if salt['pillar.get']('graphite_address', False) %}
MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + [
    'django_statsd.middleware.GraphiteRequestTimingMiddleware',
    'django_statsd.middleware.GraphiteMiddleware'
]
INSTALLED_APPS += ['django_statsd']
STATSD_PREFIX = 'taiga'
STATSD_CLIENT = 'django_statsd.clients.normal'
{%- endif %}

WSGI_APPLICATION = "taiga.wsgi.application"

AUTH_USER_MODEL = "users.User"
FORMAT_MODULE_PATH = "taiga.base.formats"

DATE_INPUT_FORMATS = (
    "%Y-%m-%d", "%m/%d/%Y", "%d/%m/%Y", "%b %d %Y",
    "%b %d, %Y", "%d %b %Y", "%d %b, %Y", "%B %d %Y",
    "%B %d, %Y", "%d %B %Y", "%d %B, %Y"
)

# Authentication settings (only for django admin)
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend", # default
)

MAX_AGE_AUTH_TOKEN = None
MAX_AGE_CANCEL_ACCOUNT = 30 * 24 * 60 * 60 # 30 days in seconds

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # Mainly used by taiga-front
        "taiga.auth.backends.Token",

        # Mainly used for api debug.
        "taiga.auth.backends.Session",

        # Application tokens auth
        "taiga.external_apps.auth_backends.Token",
    ),
    "DEFAULT_THROTTLE_CLASSES": (
        "taiga.base.throttling.AnonRateThrottle",
        "taiga.base.throttling.UserRateThrottle"
    ),
    "DEFAULT_THROTTLE_RATES": {
        "anon": None,
        "user": None,
        "import-mode": None,
        "import-dump-mode": "1/minute",
    },
    "FILTER_BACKEND": "taiga.base.filters.FilterBackend",
    "EXCEPTION_HANDLER": "taiga.base.exceptions.exception_handler",
    "PAGINATE_BY": 30,
    "PAGINATE_BY_PARAM": "page_size",
    "MAX_PAGINATE_BY": 1000,
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%S%z"
}

# Extra expose header related to Taiga APP (see taiga.base.middleware.cors=)
APP_EXTRA_EXPOSE_HEADERS = [
    "taiga-info-total-opened-milestones",
    "taiga-info-total-closed-milestones"
]

DEFAULT_PROJECT_TEMPLATE = "scrum"
PUBLIC_REGISTER_ENABLED = False

SEARCHES_MAX_RESULTS = 150

SOUTH_MIGRATION_MODULES = {
    'easy_thumbnails': 'easy_thumbnails.south_migrations',
}

DEFAULT_AVATAR_SIZE = 80                # 80x80 pixels
DEFAULT_BIG_AVATAR_SIZE = 300           # 300x300 pixels
DEFAULT_TIMELINE_IMAGE_SIZE = 640       # 640x??? pixels
DEFAUL_CARD_IMAGE_WIDTH = 300           # 300 pixels
DEFAUL_CARD_IMAGE_HEIGHT = 200           # 200 pixels

THUMBNAIL_ALIASES = {
    '': {
        'avatar': {'size': (DEFAULT_AVATAR_SIZE, DEFAULT_AVATAR_SIZE), 'crop': True},
        'big-avatar': {'size': (DEFAULT_BIG_AVATAR_SIZE, DEFAULT_BIG_AVATAR_SIZE), 'crop': True},
        'timeline-image': {'size': (DEFAULT_TIMELINE_IMAGE_SIZE, 0), 'crop': True},
        'card-image': {'size': (DEFAUL_CARD_IMAGE_WIDTH, DEFAUL_CARD_IMAGE_HEIGHT), 'crop': True},
    },
}

# GRAVATAR_DEFAULT_AVATAR = "img/user-noimage.png"
GRAVATAR_DEFAULT_AVATAR = ""
GRAVATAR_AVATAR_SIZE = DEFAULT_AVATAR_SIZE

TAGS_PREDEFINED_COLORS = ["#fce94f", "#edd400", "#c4a000", "#8ae234",
                          "#73d216", "#4e9a06", "#d3d7cf", "#fcaf3e",
                          "#f57900", "#ce5c00", "#729fcf", "#3465a4",
                          "#204a87", "#888a85", "#ad7fa8", "#75507b",
                          "#5c3566", "#ef2929", "#cc0000", "#a40000",
                          "#2e3436",]

FEEDBACK_ENABLED = False

STATS_ENABLED = False
STATS_CACHE_TIMEOUT = 60*60  # In second

# 0 notifications will work in a synchronous way
# >0 an external process will check the pending notifications and will send them
# collapsed during that interval
CHANGE_NOTIFICATIONS_MIN_INTERVAL = 0 #seconds

EXPORTS_TTL = 60 * 60 * 24  # 24 hours

CELERY_ENABLED = False
WEBHOOKS_ENABLED = False

# If is True /front/sitemap.xml show a valid sitemap of taiga-front client
FRONT_SITEMAP_ENABLED = False
FRONT_SITEMAP_CACHE_TIMEOUT = 24*60*60  # In second


from .sr import *


# NOTE: DON'T INSERT MORE SETTINGS AFTER THIS LINE
TEST_RUNNER="django.test.runner.DiscoverRunner"

if "test" in sys.argv:
    print ("\033[1;91mNo django tests.\033[0m")
    print ("Try: \033[1;33mpy.test\033[0m")
    sys.exit(0)
